// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// #region "Generators settings"
generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator dbml {
    provider = "prisma-dbml-generator"
}

// #endregion

// #region "User relationships"
model User {
    id                  Int                   @id @default(autoincrement())
    userName            String
    email               String                @unique
    password            String
    role                String                @default("User")
    favMovies           UserMovieFavorite[]
    favSeries           UserSerieFavorite[]
    ratingsInMovie      UserMovieRating[]
    ratingsInSerie      UserSerieRating[]
    movieReviews        MovieReview[]
    serieReviews        SerieReview[]
    upvotedMovies       UpvoteMovie[]
    downvotedMovies     DownvoteMovie[]
    upvotedSeries       UpvoteSerie[]
    downvotedSeries     DownvoteSerie[]
    UserEpisodeRating   UserEpisodeRating[]
    UserEpisodeFavorite UserEpisodeFavorite[]
}

model UserEpisodeRating {
    id        Int     @id @default(autoincrement())
    rating    Float
    userId    Int
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    episodeId Int
    episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserMovieRating {
    id      Int   @id @default(autoincrement())
    rating  Float
    userId  Int
    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movieId Int
    movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSerieRating {
    id      Int   @id @default(autoincrement())
    rating  Float
    userId  Int
    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serieId Int
    serie   Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserMovieFavorite {
    id      Int   @id @default(autoincrement())
    userId  Int
    movieId Int
    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSerieFavorite {
    id      Int   @id @default(autoincrement())
    userId  Int
    serieId Int
    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serie   Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserEpisodeFavorite {
    id        Int     @id @default(autoincrement())
    userId    Int
    episodeId Int
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SerieReview {
    id        Int             @id @default(autoincrement())
    content   String          @default("")
    rating    Float?
    createdAt DateTime        @default(now())
    updatedAt DateTime?
    userId    Int
    serieId   Int
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serie     Serie           @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    upvotes   UpvoteSerie[]
    downvotes DownvoteSerie[]
}

model MovieReview {
    id        Int             @id @default(autoincrement())
    content   String          @default("")
    rating    Float?
    createdAt DateTime        @default(now())
    updatedAt DateTime?
    userId    Int
    movieId   Int
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movie     Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    upvotes   UpvoteMovie[]
    downvotes DownvoteMovie[]
}

model UpvoteMovie {
    id            Int          @id @default(autoincrement())
    userId        Int
    movieId       Int
    movieReviewId Int
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    movie         Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)
    movieReview   MovieReview? @relation(fields: [movieReviewId], references: [id], onDelete: Cascade)
}

model UpvoteSerie {
    id            Int          @id @default(autoincrement())
    userId        Int
    serieId       Int
    serieReviewId Int
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    serie         Serie        @relation(fields: [serieId], references: [id], onDelete: Cascade)
    serieReview   SerieReview? @relation(fields: [serieReviewId], references: [id], onDelete: Cascade)
}

model DownvoteMovie {
    id            Int          @id @default(autoincrement())
    userId        Int
    movieId       Int
    movieReviewId Int
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    movie         Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)
    movieReview   MovieReview? @relation(fields: [movieReviewId], references: [id], onDelete: Cascade)
}

model DownvoteSerie {
    id            Int          @id @default(autoincrement())
    userId        Int
    serieId       Int
    serieReviewId Int
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    serie         Serie        @relation(fields: [serieId], references: [id], onDelete: Cascade)
    serieReview   SerieReview? @relation(fields: [serieReviewId], references: [id], onDelete: Cascade)
}

// #endregion

// #region "Movie relationships"
model Movie {
    id                   Int                 @id @default(autoincrement())
    title                String              @default("")
    photoSrc             String              @default("")
    photoSrcProd         String              @default("")
    trailerSrc           String              @default("")
    duration             String              @default("")
    ratingImdb           Float               @default(5.0)
    releaseYear          Int                 @default(2023)
    description          String              @default("")
    genres               MovieGenre[]
    reviews              MovieReview[]
    usersWhoBookmarkedIt UserMovieFavorite[]
    usersWhoRatedIt      UserMovieRating[]
    usersUpvotes         UpvoteMovie[]
    usersDownvotes       DownvoteMovie[]
}

model MovieGenre {
    id      Int   @id @default(autoincrement())
    movieId Int
    genreId Int
    movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// #endregion

// #region "Other"
model SerieGenre {
    id      Int   @id @default(autoincrement())
    serieId Int
    genreId Int
    serie   Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Genre {
    id     Int          @id @default(autoincrement())
    name   String       @default("")
    movies MovieGenre[]
    series SerieGenre[]
}

model Serie {
    id                   Int                 @id @default(autoincrement())
    title                String              @default("")
    photoSrc             String              @default("")
    photoSrcProd         String              @default("")
    trailerSrc           String              @default("")
    description          String              @default("")
    releaseYear          Int                 @default(2020)
    ratingImdb           Float               @default(5.0)
    reviews              SerieReview[]
    genres               SerieGenre[]
    usersWhoBookmarkedIt UserSerieFavorite[]
    usersWhoRatedIt      UserSerieRating[]
    usersUpvotes         UpvoteSerie[]
    usersDownvotes       DownvoteSerie[]
}

model Episode {
    id                   Int                   @id @default(autoincrement())
    title                String                @default("")
    photoSrc             String                @default("")
    videoSrc             String                @default("")
    description          String                @default("")
    seasonId             Int
    usersWhoBookmarkedIt UserEpisodeFavorite[]
    usersWhoRatedIt      UserEpisodeRating[]
}

// #endregion
